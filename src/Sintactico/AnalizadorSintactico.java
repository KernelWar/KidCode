
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.*;
import Lexico.Pintar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\012" +
    "\005\000\002\034\004\000\002\035\006\000\002\036\005" +
    "\000\002\036\003\000\002\014\004\000\002\014\004\000" +
    "\002\017\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\006\004\000\002\006\004\000\002\010" +
    "\005\000\002\010\005\000\002\041\004\000\002\041\010" +
    "\000\002\041\006\000\002\041\004\000\002\041\003\000" +
    "\002\011\005\000\002\011\007\000\002\011\003\000\002" +
    "\013\006\000\002\040\005\000\002\040\004\000\002\007" +
    "\005\000\002\007\003\000\002\015\007\000\002\015\011" +
    "\000\002\015\010\000\002\016\005\000\002\016\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\021\011\000\002\021\013\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\023\005\000\002\024\005\000\002\025" +
    "\005\000\002\026\011\000\002\027\014\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\043\005\000" +
    "\002\045\004\000\002\044\004\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\004\006\001\002\000\004\002\246\001" +
    "\002\000\004\002\000\001\002\000\024\006\020\007\012" +
    "\010\013\011\017\012\023\015\007\020\031\032\011\046" +
    "\027\001\002\000\004\033\240\001\002\000\010\031\237" +
    "\037\216\041\162\001\002\000\004\046\235\001\002\000" +
    "\004\046\027\001\002\000\004\046\213\001\002\000\004" +
    "\047\212\001\002\000\004\047\211\001\002\000\026\005" +
    "\210\006\020\007\012\010\013\011\017\012\023\015\007" +
    "\020\031\032\011\046\027\001\002\000\004\033\202\001" +
    "\002\000\004\046\027\001\002\000\004\047\157\001\002" +
    "\000\004\047\156\001\002\000\006\006\132\046\135\001" +
    "\002\000\004\047\131\001\002\000\004\047\130\001\002" +
    "\000\036\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd" +
    "\032\ufffd\046\ufffd\001\002\000\012\031\uffd7\037\uffd7\041" +
    "\uffd7\047\uffd7\001\002\000\004\047\127\001\002\000\004" +
    "\033\037\001\002\000\004\047\036\001\002\000\036\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\032\ufff6\046" +
    "\ufff6\001\002\000\004\047\035\001\002\000\036\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\032\ufffc\046\ufffc" +
    "\001\002\000\036\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\032\ufff3\046\ufff3\001\002\000\016\033\054\042" +
    "\042\043\043\044\052\045\053\046\040\001\002\000\030" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\033\uffce\034" +
    "\uffce\036\uffce\037\075\041\uffce\047\uffce\001\002\000\026" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf\034" +
    "\uffcf\036\uffcf\041\uffcf\047\uffcf\001\002\000\026\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\041\uffd1\047\uffd1\001\002\000\026\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\033\uffd0\034\uffd0\036\uffd0\041" +
    "\uffd0\047\uffd0\001\002\000\006\033\054\034\064\001\002" +
    "\000\010\033\uffc2\034\uffc2\041\uffc2\001\002\000\010\033" +
    "\uffc4\034\uffc4\041\uffc4\001\002\000\012\024\061\033\uffc3" +
    "\034\uffc3\041\uffc3\001\002\000\004\024\057\001\002\000" +
    "\026\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\033\uffcd" +
    "\034\uffcd\036\uffcd\041\uffcd\047\uffcd\001\002\000\026\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\033\uffcc\034\uffcc" +
    "\036\uffcc\041\uffcc\047\uffcc\001\002\000\026\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\033\uffcb\034\uffcb\036\uffcb" +
    "\041\uffcb\047\uffcb\001\002\000\014\042\042\043\043\044" +
    "\052\045\053\046\040\001\002\000\004\034\056\001\002" +
    "\000\012\024\uffbf\033\uffbf\034\uffbf\041\uffbf\001\002\000" +
    "\014\042\042\043\043\044\052\045\053\046\040\001\002" +
    "\000\010\033\uffbe\034\uffbe\041\uffbe\001\002\000\004\033" +
    "\054\001\002\000\010\033\uffc0\034\uffc0\041\uffc0\001\002" +
    "\000\010\033\uffc1\034\uffc1\041\uffc1\001\002\000\004\021" +
    "\066\001\002\000\004\024\061\001\002\000\024\006\020" +
    "\007\012\010\013\011\017\012\023\015\007\020\031\032" +
    "\011\046\027\001\002\000\030\006\020\007\012\010\013" +
    "\011\017\012\023\015\007\020\031\022\070\023\071\032" +
    "\011\046\027\001\002\000\024\006\020\007\012\010\013" +
    "\011\017\012\023\015\007\020\031\032\011\046\027\001" +
    "\002\000\004\047\uffc6\001\002\000\036\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\017" +
    "\ufffe\020\ufffe\022\ufffe\023\ufffe\032\ufffe\046\ufffe\001\002" +
    "\000\026\006\020\007\012\010\013\011\017\012\023\015" +
    "\007\020\031\023\074\032\011\046\027\001\002\000\004" +
    "\047\uffc5\001\002\000\010\033\103\042\076\046\100\001" +
    "\002\000\004\040\uffea\001\002\000\004\040\126\001\002" +
    "\000\004\040\uffe9\001\002\000\014\025\112\026\111\027" +
    "\107\030\110\040\uffe8\001\002\000\022\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\033\uffdc\034\uffdc\040\uffdc\047\uffdc\001" +
    "\002\000\016\033\103\042\042\043\043\044\052\045\053" +
    "\046\040\001\002\000\012\025\112\026\111\027\107\030" +
    "\110\001\002\000\012\025\112\026\111\027\107\030\110" +
    "\001\002\000\014\042\042\043\043\044\052\045\053\046" +
    "\040\001\002\000\016\033\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\016\033\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\016\033\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000" +
    "\016\033\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\001\002\000\014\025\112\026\111\027\107\030\110\034" +
    "\115\001\002\000\014\042\042\043\043\044\052\045\053" +
    "\046\040\001\002\000\022\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\033\uffdb\034\uffdb\040\uffdb\047\uffdb\001\002\000\020" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\033\uffda\034\uffda\047" +
    "\uffda\001\002\000\020\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\033\uffd9\034\uffd9\047\uffd9\001\002\000\004\033\122\001" +
    "\002\000\014\025\uffde\026\uffde\027\uffde\030\uffde\034\123" +
    "\001\002\000\014\042\042\043\043\044\052\045\053\046" +
    "\040\001\002\000\022\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\033\uffdd\034\uffdd\040\uffdd\047\uffdd\001\002\000\004\033" +
    "\122\001\002\000\022\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\033\uffde\034\uffde\040\uffde\047\uffde\001\002\000\026\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\034\uffeb" +
    "\036\uffeb\041\uffeb\047\uffeb\001\002\000\036\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7" +
    "\017\ufff7\020\ufff7\022\ufff7\023\ufff7\032\ufff7\046\ufff7\001" +
    "\002\000\036\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\032\ufff5\046\ufff5\001\002\000\036\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\023\ufffb\032\ufffb\046\ufffb\001\002" +
    "\000\004\046\154\001\002\000\004\041\uffba\001\002\000" +
    "\004\041\142\001\002\000\006\031\137\041\uffb9\001\002" +
    "\000\004\041\uffbb\001\002\000\004\042\141\001\002\000" +
    "\004\041\uffb6\001\002\000\004\041\uffb7\001\002\000\004" +
    "\013\143\001\002\000\016\033\054\042\042\043\043\044" +
    "\052\045\053\046\040\001\002\000\006\033\054\041\145" +
    "\001\002\000\004\032\146\001\002\000\004\042\153\001" +
    "\002\000\004\016\150\001\002\000\024\006\020\007\012" +
    "\010\013\011\017\012\023\015\007\020\031\032\011\046" +
    "\027\001\002\000\026\006\020\007\012\010\013\011\017" +
    "\012\023\014\152\015\007\020\031\032\011\046\027\001" +
    "\002\000\004\047\uffbc\001\002\000\004\016\uffb5\001\002" +
    "\000\004\031\137\001\002\000\004\041\uffb8\001\002\000" +
    "\036\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\032" +
    "\ufff9\046\ufff9\001\002\000\036\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\032\ufff4\046\ufff4\001\002\000\004" +
    "\047\uffe6\001\002\000\010\031\163\041\162\047\uffe7\001" +
    "\002\000\004\046\201\001\002\000\016\033\167\042\042" +
    "\043\043\044\052\045\053\046\040\001\002\000\016\025" +
    "\112\026\111\027\107\030\110\033\uffdf\047\uffdf\001\002" +
    "\000\006\033\103\047\uffe4\001\002\000\014\025\112\026" +
    "\111\027\107\030\110\047\uffe5\001\002\000\016\033\103" +
    "\042\042\043\043\044\052\045\053\046\040\001\002\000" +
    "\012\025\112\026\111\027\107\030\110\001\002\000\014" +
    "\025\112\026\111\027\107\030\110\034\115\001\002\000" +
    "\016\033\103\042\042\043\043\044\052\045\053\046\040" +
    "\001\002\000\014\025\112\026\111\027\107\030\110\034" +
    "\174\001\002\000\006\033\uffe2\047\uffe2\001\002\000\016" +
    "\025\112\026\111\027\107\030\110\033\uffe0\047\uffe0\001" +
    "\002\000\016\033\103\042\042\043\043\044\052\045\053" +
    "\046\040\001\002\000\016\025\112\026\111\027\107\030" +
    "\110\033\uffe1\047\uffe1\001\002\000\016\025\112\026\111" +
    "\027\107\030\110\033\uffe3\047\uffe3\001\002\000\012\031" +
    "\uffd8\037\uffd8\041\uffd8\047\uffd8\001\002\000\014\042\042" +
    "\043\043\044\052\045\053\046\040\001\002\000\006\034" +
    "\205\041\206\001\002\000\006\034\uffee\041\uffee\001\002" +
    "\000\004\047\ufff0\001\002\000\014\042\042\043\043\044" +
    "\052\045\053\046\040\001\002\000\006\034\uffef\041\uffef" +
    "\001\002\000\004\002\uffff\001\002\000\036\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8" +
    "\017\ufff8\020\ufff8\022\ufff8\023\ufff8\032\ufff8\046\ufff8\001" +
    "\002\000\036\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\023" +
    "\ufffa\032\ufffa\046\ufffa\001\002\000\004\047\ufff1\001\002" +
    "\000\004\047\uffec\001\002\000\012\031\217\037\216\041" +
    "\162\047\uffed\001\002\000\004\042\231\001\002\000\004" +
    "\035\220\001\002\000\014\042\042\043\043\044\052\045" +
    "\053\046\040\001\002\000\016\025\112\026\111\027\107" +
    "\030\110\036\225\041\224\001\002\000\016\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\036\uffd2\041\uffd2\001\002\000\014" +
    "\042\042\043\043\044\052\045\053\046\040\001\002\000" +
    "\014\042\042\043\043\044\052\045\053\046\040\001\002" +
    "\000\004\047\uffd6\001\002\000\016\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\036\uffd3\041\uffd3\001\002\000\006\036\230" +
    "\041\224\001\002\000\004\047\uffd5\001\002\000\004\040" +
    "\232\001\002\000\004\031\233\001\002\000\014\042\042" +
    "\043\043\044\052\045\053\046\040\001\002\000\004\047" +
    "\uffd4\001\002\000\004\047\236\001\002\000\036\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\032\ufff2\046\ufff2" +
    "\001\002\000\020\033\167\035\220\042\042\043\043\044" +
    "\052\045\053\046\040\001\002\000\016\033\054\042\042" +
    "\043\043\044\052\045\053\046\040\001\002\000\006\033" +
    "\054\034\242\001\002\000\004\016\243\001\002\000\024" +
    "\006\020\007\012\010\013\011\017\012\023\015\007\020" +
    "\031\032\011\046\027\001\002\000\026\006\020\007\012" +
    "\010\013\011\017\012\023\015\007\017\245\020\031\032" +
    "\011\046\027\001\002\000\004\047\uffbd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\015\005\025\006\013" +
    "\007\007\010\021\012\032\014\014\015\027\021\024\026" +
    "\020\027\031\034\023\035\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\214\015" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\071\006\013\007\007\010\021\012" +
    "\032\014\014\015\027\021\024\026\020\027\031\034\023" +
    "\035\033\001\001\000\002\001\001\000\006\007\160\010" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\133\043\135\044\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\040\022\043\023\045\024\046\025\044\030" +
    "\047\037\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\062\024" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\040\025\054\030\047" +
    "\037\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\040\030\057\037\050\001\001\000\002\001\001" +
    "\000\004\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\066" +
    "\005\025\006\013\007\007\010\021\012\032\014\014\015" +
    "\027\021\024\026\020\027\031\034\023\035\033\001\001" +
    "\000\032\005\071\006\013\007\007\010\021\012\032\014" +
    "\014\015\027\021\024\026\020\027\031\034\023\035\033" +
    "\001\001\000\034\004\072\005\025\006\013\007\007\010" +
    "\021\012\032\014\014\015\027\021\024\026\020\027\031" +
    "\034\023\035\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\071\006\013\007\007\010\021\012\032" +
    "\014\014\015\027\021\024\026\020\027\031\034\023\035" +
    "\033\001\001\000\002\001\001\000\010\011\100\013\101" +
    "\020\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\123\001\001\000\002\001\001" +
    "\000\014\011\103\013\101\017\040\030\104\037\050\001" +
    "\001\000\004\031\117\001\001\000\006\031\105\040\112" +
    "\001\001\000\010\017\040\030\116\037\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\113\001\001\000\010\017\040\030" +
    "\115\037\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\120\001\001\000\002\001" +
    "\001\000\010\017\040\030\104\037\050\001\001\000\002" +
    "\001\001\000\004\013\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\040\022\143\023\045\024\046\025\044" +
    "\030\047\037\050\001\001\000\006\023\062\024\064\001" +
    "\001\000\004\033\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\150\005\025\006\013\007\007\010" +
    "\021\012\032\014\014\015\027\021\024\026\020\027\031" +
    "\034\023\035\033\001\001\000\032\005\071\006\013\007" +
    "\007\010\021\012\032\014\014\015\027\021\024\026\020" +
    "\027\031\034\023\035\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\163\013\101" +
    "\017\040\030\165\037\050\041\164\001\001\000\004\031" +
    "\123\001\001\000\006\011\177\013\101\001\001\000\006" +
    "\031\105\040\174\001\001\000\014\011\103\013\101\017" +
    "\040\030\167\037\050\001\001\000\006\031\105\040\170" +
    "\001\001\000\004\031\171\001\001\000\014\011\172\013" +
    "\101\017\040\030\115\037\050\001\001\000\004\031\123" +
    "\001\001\000\002\001\001\000\004\031\175\001\001\000" +
    "\014\011\176\013\101\017\040\030\115\037\050\001\001" +
    "\000\004\031\123\001\001\000\004\031\123\001\001\000" +
    "\002\001\001\000\012\017\040\030\203\036\202\037\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\040\030\206\037\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\220\017" +
    "\040\030\221\037\050\001\001\000\004\031\222\001\001" +
    "\000\002\001\001\000\012\016\226\017\040\030\221\037" +
    "\050\001\001\000\010\017\040\030\225\037\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\040\030\233\037\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\163\013\101" +
    "\017\040\030\165\037\050\041\164\001\001\000\020\017" +
    "\040\022\240\023\045\024\046\025\044\030\047\037\050" +
    "\001\001\000\006\023\062\024\064\001\001\000\002\001" +
    "\001\000\034\004\243\005\025\006\013\007\007\010\021" +
    "\012\032\014\014\015\027\021\024\026\020\027\031\034" +
    "\023\035\033\001\001\000\032\005\071\006\013\007\007" +
    "\010\021\012\032\014\014\015\027\021\024\026\020\027" +
    "\031\034\023\035\033\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol simboloAnterior;
    public Nodo nodoPrincipal;
    public Pintar estilo = new Pintar();
    private int guia = 0;
    private int conError = 0;
    public String textError = "";
    private int charError = 0;
    
    private int charCode = 0;
    public int charErrorDetec(){
        return charCode;
    }
    private void getGuia(){
        System.out.println("guia :"+guia);
        guia++;
    }

    

     public void syntax_error(Symbol cur_token) {
        //report_error("Syntax error", cur_token); 
        
        if(cur_token.sym != 0){
            Scanner s = getScanner();
        
        
        report_error("Syntax error", cur_token); 
        this.charCode = cur_token.left;
        
        conError++;

        String m = "Error "+conError+": \n";
        int l = cur_token.right;
        String v = cur_token.value.toString();

        textError += m+"\tLinea: "+l+"\n\tCerca de: "+v+"\n";

        int tam =textError.length();
        estilo.insertarCodigo(textError);        
        estilo.pintaRojoFuerte(charError,tam);

        charError += tam;
        }

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= PROGRAMA 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo n1 = new Nodo("INIT","",parser.guia);
        getGuia();
        n1.addRaiz((Nodo) prog);
        parser.nodoPrincipal = (Nodo) n1;
        RESULT = n1;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PAL_INICIO_PROG CODIGO PAL_FIN_PROG 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("PROGRAMA","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("PAL_INICIO_PROG",n1.toString(),parser.guia);  
        getGuia();
        Nodo nd2 = new Nodo("PAL_FIN_PROG",n2.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        
        
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= CODIGO ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CODIGO","",parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo) raiz1);
        raiz.addRaiz((Nodo) raiz2);
        
        RESULT = raiz;
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("CODIGO","",parser.guia);
       getGuia(); 

       raiz.addRaiz((Nodo) raiz1);
       RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURAS ::= IMPRIMIR_DATO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);
            
            RESULT = raiz;
            System.out.println("[IMPRIMIR]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURAS ::= LEER_DATO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[LEER]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURAS ::= DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[DECLARACION]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURAS ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[ASIGNACION]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURAS ::= DECLARACION_GRUPO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[DECLARACION_GRUPO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURAS ::= ASIGNACION_GRUPO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[ASIGNACION GRUPO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURAS ::= INC_DEC 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            RESULT = raiz;
            System.out.println("<INC_DEC>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURAS ::= CONDICIONALES PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CONDICIONALES>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURAS ::= C_MIENTRAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CICLO MIENTRAS>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURAS ::= C_REPETIR PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CICLO REPETIR>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INC_DEC ::= OPER_ASIG_InDe NOMBRE_VAR PUNTOYCOMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ASIGNACION_INC_DEC","",parser.guia);
            getGuia();
            
            Nodo nd1 = new Nodo("INC/DEC",n1.toString(),parser.guia);
            getGuia();

            Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
            Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);            
            getGuia();

            Nodo nd3 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz(nd1);
            raiz.addRaiz(nd2);
            raiz.addRaiz(nd3);
            

            RESULT = raiz;
            System.out.println("[INCREMENTO DECREMENTO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LEER_DATO ::= LEER NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LEER_DATO","",parser.guia);
        getGuia();
        
        Nodo nd1 = new Nodo("LEER",n1.toString(),parser.guia);
        getGuia();

        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);

        RESULT = raiz;
        System.out.println("<LEER>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LEER_DATO",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRIMIR_DATO ::= IMPRIMIR OPER_AGRUP_PI LISTA_IMPRECIONES OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("IMPRIMIR_DATO","",parser.guia);        
        getGuia();       
        
        Nodo nd1 = new Nodo("IMPRIMIR",n1.toString(),parser.guia);
        getGuia();  
        
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia(); 
        
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia(); 

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz(nd3);

        RESULT = raiz;
        System.out.println("<IMPRIMIR_DATO><IMPRIMIR><OPER_AGRUP_PI><LISTA_IMPRECIONES><OPER_AGRUP_PF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_DATO",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_IMPRECIONES ::= LISTA_IMPRECIONES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);        
        RESULT = raiz;
        System.out.println("<LISTA_IMPRECIONES><LISTA_IMPRECIONES><OPER_AGRUP_COMA><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_IMPRECIONES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
       getGuia(); 
       raiz.addRaiz((Nodo)raiz1);
       RESULT = raiz;
       System.out.println("<LISTA_IMPRECIONES><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_GRUPO ::= PAL_GRUPO LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_GRUPO ::= PAL_GRUPO ASIGNACION_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        RESULT = raiz;    
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <ASIGNACION_GRUPO>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR_GRUPO ::= NOMBRE_VAR OPER_AGRUP_CI INDEX OPER_AGRUP_CF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia);
        getGuia();
        
        Nodo nd2 = new Nodo("OPER_AGRUP_CI",n2.toString(),parser.guia);
        getGuia();
                
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        
        RESULT = raiz;           
        System.out.println("<VALOR_GRUPO><NOMBRE_VAR> <OPER_AGRUP_CI> <VALOR_ENT> <OPER_AGRUP_CF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_GRUPO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INDEX ::= VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz;  
        System.out.println("<INDEX><VALOR_ENT>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INDEX ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz; 
        System.out.println("<INDEX><NOMBRE_VAR>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INDEX ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;
        System.out.println("<INDEX><EXP_ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= PAL_VARIABLE LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;  
        
        
        System.out.println("<DECLARACION><PAL_VARIABLE> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= PAL_VARIABLE ASIGNACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;      
        System.out.println("<DECLARACION><PAL_VARIABLE><ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL EXP_ASIG_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();        
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR><OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ASIG_BASICA ::= EXP_ASIG_BASICA EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP_ASIG_BASICA ::= OPER_AGRUP_PI TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        raiz.addRaiz(nd2);
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP_ASIG_BASICA ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP_ASIGNACION ::= EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    

        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_ASIGNACION ::= OPER_AGRUP_PI EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz(nd2);
        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_ASIGNACION ::= EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz;         
        System.out.println("<EXP_ASIGNACION><EXP_BASICA>");     
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_BASICA ::= OPER_AGRUP_PI TIPO_VALOR LISTA_VALORES_EXP OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd2);
        RESULT = raiz;         
        System.out.println("<EXP_BASICA>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_BASICA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_VALORES_EXP ::= LISTA_VALORES_EXP OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        RESULT = raiz;         
        System.out.println("<LISTA_VALORES_EXP><LISTA_VALORES_EXP><OPERADOR_ARITMETICO><TIPO_VALOR>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_VALORES_EXP ::= OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;    
        System.out.println("<OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_VARIABLES ::= LISTA_VARIABLES OPER_AGRUP_COMA NOMBRE_VAR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);       
        
        RESULT = raiz;        
        System.out.println("<LISTA_VARIABLES><LISTA_VARIABLES><OPER_AGRUP_COMA><NOMBRE_VAR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_VARIABLES ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();   
          
             
        raiz.addRaiz(nd1);
       
        
        RESULT = raiz;
        System.out.println("<LISTA_VARIABLES><NOMBRE_VAR>");
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL OPER_AGRUP_LLI LISTA_VALORES OPER_AGRUP_LLF 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("OPER_AGRUP_LLI",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_LLF",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd3);
        RESULT = raiz;        
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_ASIG_IGUAL><OPER_AGRUP_LLI><LISTA_VALORES><OPER_AGRUP_LLF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL OPER_AGRUP_LLI LISTA_VALORES OPERADOR_ARITMETICO LISTA_VALORES OPER_AGRUP_LLF 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("OPER_AGRUP_LLI",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_LLF",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd3);
        RESULT = raiz;        
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_ASIG_IGUAL><LISTA_VALORES><OPERADOR_ARITMETICO><LISTA_VALORES><OPER_AGRUP_LLF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_AGRUP_CI VALOR_ENT OPER_AGRUP_CF OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_CI",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia(); 
        Nodo nd4 = new Nodo("OPER_ASIG_IGUALF",n4.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;         
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_AGRUP_CI><VALOR_ENT><OPER_AGRUP_CF><OPER_ASIG_IGUAL><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_VALORES ::= LISTA_VALORES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;   
        System.out.println("<LISTA_VALORES><OPER_AGRUP_COMA><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_VALORES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;          
        System.out.println("<LISTA_VALORES><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VALOR_COMPATIBLE ::= VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();  
        

        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TVALOR_ENT>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VALOR_COMPATIBLE ::= VALOR_FLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_FLO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><VALOR_FLO>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VALOR_COMPATIBLE ::= VALOR_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_GRUPO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;       
        System.out.println("<TIPO_VALOR><VALOR_GRUPO>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VALOR_COMPATIBLE ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><NOMBRE_VAR>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VALOR ::= TIPO_VALOR_COMPATIBLE 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TIPO_VALOR_COMPATIBLE>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VALOR ::= VALOR_STRING 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_STRING",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><VALOR_STRING>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_VALOR ::= VALOR_LOG 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_LOG",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<TIPO_VALOR><VALOR_LOG>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_ARITMETICO ::= OPER_ART_SUMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_SUMA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz; 
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_SUMA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ARITMETICO ::= OPER_ART_RESTA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_RESTA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_RESTA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_ARITMETICO ::= OPER_ART_MUL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_MUL",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;     
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_MUL>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_ARITMETICO ::= OPER_ART_DIV 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_DIV",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_DIV>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONALES ::= CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF CONDICION_INICIO CODIGO CONDICION_FIN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICIONALES","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("CONDICION_SI",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia();   
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia();   
        Nodo nd4 = new Nodo("CONDICION_INICIO",n4.toString(),parser.guia);
        getGuia();   
        Nodo nd5 = new Nodo("CONDICION_FIN",n5.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd5);
        RESULT = raiz;         
       System.out.println("<CONDICIONALES>CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF CONDICION_INICIO CODIGO CONDICION_FIN"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONALES ::= CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF CONDICION_INICIO CODIGO CONDICION_SINO CODIGO CONDICION_FIN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICIONALES","",parser.guia);        
        getGuia(); 
        Nodo nd1 = new Nodo("CONDICION_SI",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia();
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia();
        Nodo nd4 = new Nodo("CONDICION_INICIO",n4.toString(),parser.guia);
        getGuia();
        Nodo nd5 = new Nodo("CONDICION_SINO",n5.toString(),parser.guia);
        getGuia();
        Nodo nd6 = new Nodo("CONDICION_FIN",n6.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd5);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz(nd6);
        RESULT = raiz;      
       System.out.println("<CONDICIONALES>CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF CONDICION_INICIO CODIGO CONDICION_SINO CODIGO CONDICION_FIN"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_CONDICIONES ::= CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_CONDICIONES ::= CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion media>CONDICION_MEDIA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA_CONDICIONES ::= CONDICION_BAJA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion baja> CONDICION_BAJA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_CONDICIONES ::= LISTA_CONDICIONES CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<lista><condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION_ALTA ::= CONDICION_MEDIA OPER_REL CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_ALTA","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_ALTA>CONDICION_MEDIA OPER_REL CONDICION_MEDIA");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ALTA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION_MEDIA ::= OPER_AGRUP_PI CONDICION_BAJA OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_MEDIA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<CONDICION_MEDIA>OPER_AGRUP_PI CONDICION_BAJA OPER_AGRUP_PF");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_MEDIA",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION_BAJA ::= TIPO_VALOR OPER_REL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_BAJA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_BAJA>TIPO_VALOR OPER_REL TIPO_VALOR");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_BAJA",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // C_MIENTRAS ::= CICLO_MIENTRAS OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF INICIO_CICLO CODIGO FIN_MIENTRAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("C_MIENTRAS","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("CICLO_MIENTRAS",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia();
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia();
        Nodo nd4 = new Nodo("INICIO_CICLO",n4.toString(),parser.guia);
        getGuia();
        Nodo nd5 = new Nodo("FIN_MIENTRAS",n5.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd5);
        RESULT = raiz;
        System.out.println("<C_MIENTRAS>CICLO_MIENTRAS OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF INICIO_CICLO CODIGO FIN_MIENTRAS");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_MIENTRAS",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // C_REPETIR ::= CICLO_REPETIR VARIABLE_DA OPER_AGRUP_COMA REPETIR_HASTA LISTA_CONDICIONES OPER_AGRUP_COMA R_INCDEC INICIO_CICLO CODIGO REPETIR_FIN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("C_REPETIR","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("CICLO_REPETIR",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_COMA",n2.toString(),parser.guia);
        getGuia();
        Nodo nd3 = new Nodo("REPETIR_HASTA",n3.toString(),parser.guia);
        getGuia();
        Nodo nd4 = new Nodo("OPER_AGRUP_COMA",n4.toString(),parser.guia);
        getGuia();
        Nodo nd5 = new Nodo("INICIO_CICLO",n5.toString(),parser.guia);
        getGuia();
        Nodo nd6 = new Nodo("REPETIR_FIN",n6.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        raiz.addRaiz(nd3);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz(nd5);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd6);
        RESULT = raiz;
        System.out.println("<C_REPETIR>CICLO_REPETIR VARIABLE_DA OPER_AGRUP_COMA REPETIR_HASTA LISTA_CONDICIONES OPER_AGRUP_COMA R_INCDEC INICIO_CICLO CODIGO REPETIR_FIN");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_REPETIR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLE_DA ::= DECL_ASIG_CICLO 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIABLE_DA ::= ASIGNACION_CICLO 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLE_DA ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);            
        getGuia();

        raiz.addRaiz(nd1);
        RESULT = raiz;
        System.out.println("<VARIABLE_DA><NOMBRE_VAR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECL_ASIG_CICLO ::= PAL_VARIABLE NOMBRE_VAR ASIG_CICLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECL_ASIG_CICLO","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);            
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        
        RESULT = raiz;
        System.out.println("<DECL_ASIG_CICLO>PAL_VARIABLE NOMBRE_VAR OPER_ASIG_IGUAL VALOR_ENT");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECL_ASIG_CICLO",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIG_CICLO ::= OPER_ASIG_IGUAL VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIG_CICLO","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<ASIG_CICLO>OPER_ASIG_IGUAL VALOR_ENT");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIG_CICLO",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION_CICLO ::= NOMBRE_VAR ASIG_CICLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_CICLO","",parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);            
        getGuia();
     
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<ASIGNACION_CICLO>NOMBRE_VAR ASIG_CICLO");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_CICLO",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // R_INCDEC ::= OPER_ASIG_InDe VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("R_INCDEC","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("OPER_ASIG_InDe",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<R_INCDEC><OPER_ASIG_InDe VALOR_ENT>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R_INCDEC",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
